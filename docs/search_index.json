[["index.html", "autovalid package guide Package &amp; Guide Overview", " autovalid package guide MaryClare Roche 2023-12-13 Package &amp; Guide Overview The autovalid package was developed by Gordon Arsenoff and MaryClare Roche to aid Arab Barometer in assessing survey data quality. This guide should serve as a reference for how to use the autovalid package and how to understand the results. "],["basic-use.html", "Chapter 1 Basic Use", " Chapter 1 Basic Use This chapter sheds light on how to use the autovalid package at the most basic level. There are four steps to run all the validation tests in autovalid. Load the necessary libraries. These libraries are readxl and autovalid. Load the raw data and location data. Use the prep_data() function from autovalid to create the object that will be used for validation. Run the autovalid() function on the output of prep_data(). The zip files are NOT loaded. Only save the path. Make sure to save the output to an object. Run the parse_for_major_flags() function on the output of autovalid(). Make sure to save the output to an object. The output of the function autovalid() contains the results of all the validation tests. The output of the function parse_for_major_flags()` contains the results of all the major flag tests. Ultimately, if you follow the five steps, your code should follow the example of the following code block: #.........................Load Libraries......................... library(readxl) library(autovalid) #......................Load data and paths....................... raw_country_data &lt;- read_xlsx(&quot;path/to/raw/data.xlsx&quot;) gps_data &lt;- read_xlsx(&quot;path/to/gps/data.xlsx&quot;) #..........................Prep the data......................... prepped_data &lt;- prep_data(raw_data = raw_country_data, aud_path = &quot;path/to/audits.zip&quot;) #..........................Run autovalid......................... validation_output &lt;- autovalid(prepped_data, location_data = gps_data) #......................Run major flag checks..................... flags_output &lt;- parse_for_major_flags(validation_output) Now that we have the results, we need to know how to understand them. A majority of the rest of the guide is dedicated to explaining the output of the autovalid() function. "],["output-overview.html", "Chapter 2 Output Overview 2.1 pre_data 2.2 csv_data 2.3 aud_data 2.4 duplicated_interviews 2.5 nonvalid", " Chapter 2 Output Overview This chapter describes the output of the prep_data() function. The output of prep_data() creates a table that is ready to use for the automatic validation. The overall output of prep_data() is a list of five objects called pre_data, csv_data, aud_data, duplicated_interviews, and nonvalid. The output looks like this list: pre_data (data frame) csv_data (data frame) aud_data (data frame) duplicated_interviews (data frame) nonvalid (list) The next sections look at each of the objects prep_data() returns. 2.1 pre_data The pre_data data frame is the preprocessed data to undergo automatic validation. pre_data contains the organized and cleaned data after handling duplicates, collapsing randomized columns, and adding audit information. 2.2 csv_data The csv_data data frame formats the data to make it easier to export as a CSV file. 2.3 aud_data The aud_data data frame processeses the audit file to review timers and enumerator behaviors. 2.4 duplicated_interviews The duplicated_interviews data frame contains information about duplicated interviews, specifically the duplicated UUIDs. The output can be a character string indicating the absence of duplicated UUIDs. 2.5 nonvalid The nonvalid list contains different types of non-valid interviews. Each element of the list corresponds to a specific category of non-valid interviews. Categories of non-valid interviews: Unsuccessful_Knock Failed_Kish No_Consent Incomplete "],["output-overview-1.html", "Chapter 3 Output Overview 3.1 validation 3.2 raw_input 3.3 composite", " Chapter 3 Output Overview This chapter describes the output of the autovalid() function. The output of autovalid() is a slightly complex structure; it is a nested list. That is, the output is a list that contains a list. To help understand the output, all the elements are labeled. The overall output of autovalid() is a list of three objects called validation, raw_input, and composite. The latter two objects, raw_input and composite, are data frames. The object validation is a list of three more objects called responses, interviewers, and supervisors. Each of the objects in the validation list are data frames. The output looks like this list: validation (list) responses (data frame) interviewers (data frame) supervisors (data frame) raw_input (data frame) composite (data frame) The next sections look at each of the objects autovalid() returns. 3.1 validation As previously mentioned, validation is a list of three data frames. Each of the data frames is a set of validation test results. 3.1.1 responses The responses data frame contains all the interview-level checks run by autovalid(), as well as the _UUID, enumerator ID, supervisor ID, and group split the interview belonged to. 3.1.2 interviewers The interviewers data frame contains all the enumerator-level checks run by autovalid(), as well as enumerator ID, supervisor ID, and group split the interview belonged to. Most of these checks are the mean of the interview-level checks aggregated by enumerator. 3.1.3 supervisors The supervisors data frame contains all the supervisor-level checks run by autovalid(), as well as supervisor ID, and group split the interview belonged to. Most of these checks are the mean of the interview-level checks aggregated by supervisor. 3.2 raw_input The raw_input data frame is the condensed version of the raw data downloaded from KoboToolbox with non-valid interviews filtered out. The raw data downloaded from KoboToolbox has several “extra” columns from our efforts at randomization. The raw_input data frame collapses all these columns into one variable as appropriate. The raw_input only contains unique interviews the enumerator marks as “complete”. 3.3 composite The composite data frame is a data frame that contains all the interview responses from raw_input and all the interview-level tests from validation$responses. It is a result of joining the two data frame by _UUID. "],["output-name-conventions.html", "Chapter 4 Output Name Conventions 4.1 CHECK_ Variables 4.2 SCORE_ Variables", " Chapter 4 Output Name Conventions When exploring the output of autovalid(), you will see many variables that beging with CHECK_ or SCORE_. These prefixes tell you a bit about the variable. 4.1 CHECK_ Variables Variables that begin with the prefix CHECK_ are logicals, meaning the entire column is TRUE, FALSE, or occasionally NA. The question the variable is asking is “Is this check passed?” If the result is TRUE, the check is passed. If the result is FALSE, the check is failed. Interviews, enumerators, or supervisors flagged by autovalid() will have a lot of FALSE results. For example, the variable CHECK_TIMER1_ABOVE_MIN asks if Timer 1 is above the minimum time threshold. If CHECK_TIMER1_ABOVE_MIN is TRUE, the interview is over the minimum time threshold. If CHECK_TIMER1_ABOVE_MIN is FALSE, the interview is below the minimum time threshold. 4.2 SCORE_ Variables Variables that begin with the prefix SCORE_ are numeric and always fall between 0 and 1. This is because they are the mean of the all the CHECK_ variables in a category of validation tests. The category can be told by what follows SCORE_. For example, SCORE_LOGIC is the mean of all the logic validation tests that begin with CHECK_. Recall that the CHECK_ variables are all logicals. To computers, TRUE is 1 and FALSE is 0. The higher the SCORE_ variable, the more checks the interview, enumerator, or supervisor passed. "],["function-parameters.html", "Chapter 5 Function Parameters 5.1 timer_fail_count 5.2 thresh_max_miss 5.3 thresh_max_pct 5.4 do_timer 5.5 do_variance 5.6 do_percent_match 5.7 do_missingness 5.8 do_location", " Chapter 5 Function Parameters The parse_for_major_flags() function is a powerful tool designed to analyze the results of the autovalid() function and identify interviews that fail major tests. These major tests include considerations for interview duration, missing data, percent match, location discrepancies, and straightlining. This chapter describes the different parameters in the function that can be adjusted for your specific analysis. The major tests in the parse_for_major_flags() are: timer_fail_count thresh_max_miss thresh_max_pct do_timer do_variance do_percent_match do_missingness do_location 5.1 timer_fail_count timer_fail_count uses the 4 timers in the autovalid() function to flag time duration issues. The default input is 3 and can go up to 4 timers. 5.2 thresh_max_miss thresh_max_miss is the threshold for the maximum acceptable missingness percentage in an interview. The default is 0.15. 5.3 thresh_max_pct thresh_max_miss determines the threshold for maximum acceptable percent match across interviews. The default is 0.85. 5.4 do_timer The do_timer parameter flags interviews that are too short and is set TRUE by default. Set do_timer to FALSE to exclude timer checks from the analysis. 5.5 do_variance The do_variance parameter flags straightlining and is set TRUE by default. Set do_variance to FALSE to exclude straightlining checks from the analysis. 5.6 do_percent_match The do_percent_match parameter flags high percent match and is set TRUE by default. Set do_percent_match to FALSE to exclude percent match checks from the analysis. 5.7 do_missingness The do_missingness parameter flags high levels of missing responses in an interivew and is set to TRUE by default. Set do_missingness to FALSE to exclude missingness checks from your analysis. 5.8 do_location The do_location parameter flags questionable locations and is set to TRUE by default. Set do_location to FALSE to exclude location checks from the analysis. "],["output-overview-2.html", "Chapter 6 Output Overview 6.1 refield_report 6.2 refield_validation_results 6.3 refield_interviews", " Chapter 6 Output Overview This chapter describes the output of the parse_for_major_flags() function. The output of parse_for_major_flags() include data frame with information about interviews that fail one or more of the major tests, validation checks, and identifies interviews to refield. The output looks like this list: refield_report (data frame) refield_validation_results (data frame) refield_interviews (data frame) 6.1 refield_report refield_report is a data frame that provides information about interviews that failed one or more major tests. It includes reasons for failure, such as being too short, having high missingness, etc. 6.2 refield_validation_results refield_validation_results provides a summary of the major validation checks for each flagged interview. It includes the total number of flags as well as information about timers, missingness, percent match, location checks, and variance checks. This table gives a concise view of the validation results for flagged interviews. 6.3 refield_interviews refield_interviews includes a subset of the original interview data but only for the interviews that failed one or more major tests. It allows for a detailed examination of the responses and characteristics of the flagged interviews. "],["timer-checks.html", "Chapter 7 Timer Checks 7.1 Understanding the Four Timers 7.2 Time of Day 7.3 Min/Max Length 7.4 SCORE_TIMER 7.5 Changing Defaults 7.6 Result Columns", " Chapter 7 Timer Checks The autovalid() function performs ten checks related to time and gives an overall score. The results are in the columns: CHECK_TIMER1_AFTER_9AM CHECK_TIMER1_BEFORE_8PM CHECK_TIMER1_ABOVE_MIN CHECK_TIMER1_BELOW_MAX CHECK_TIMER2_ABOVE_MIN CHECK_TIMER2_BELOW_MAX CHECK_TIMER3_ABOVE_MIN CHECK_TIMER3_BELOW_MAX CHECK_TIMER4_ABOVE_MIN CHECK_TIMER4_BELOW_MAX SCORE_TIMER 7.1 Understanding the Four Timers autovalid() uses four different measures of time to calculate the length of a survey. These timers are called TIMER1, TIMER2, TIMER3, and TIMER4. 7.1.1 TIMER1 TIMER1 is calculated from the start and end time recorded in the survey. These times are found in the raw data. The other three timers are all calculated from the audit files. 7.1.2 TIMER2 TIMER2 is calculated using the last recorded start and first recorded start in the associated interview’s audit file. All elements in an audit file have a start value, but not all have an end value, so that is why only values from the start column are used. 7.1.3 TIMER3 TIMER3 is calculated using the sum of the time spent on each page of the survey, according to the audit file. Once the survey and audit file timers start, they do not stop. If an interviewer leaves a survey and returns to it the duration of the survey may appear longer than it actually was. This timer does not include such pauses. 7.1.4 TIMER4 TIMER4 is calculated using the sum of the time spent on each page of the survey for questions that are between the first and last substantive question. By default, the first substantive question is set to \"Q2061A\" and the last substantive question is determined as the last question that begins with \"Q\". 7.2 Time of Day autovalid() uses the time recorded in the survey to determine whether the interview took place after 9am and before 8pm. 7.3 Min/Max Length The variables called CHECK_TIMERX_ABOVE_MIN and CHECK_TIMERX_BELOW_MAX, where X is 1 through 4, are all logicals telling the user whether the timer in question recorded a time above the minimum time and below the maximum time, respectively. By default, the minimum time is set to 30 minutes and the maximum time is set to 75 minutes. 7.4 SCORE_TIMER The SCORE_TIMER variable calculates the mean of all the check variables. 7.5 Changing Defaults There are four arguments in autovalid() that can be used to change the defaults for the timer checks. They are: thresh_opening: The earliest time of day an interview should begin. Use a 24 hour clock time. Default is 9. Associated with CHECK_TIMER1_AFTER_9AM. NOTE: Even if you change the default, the variable name will not change. It will still say CHECK_TIMER1_AFTER_9AM. thresh_closing: The latest time of day an interview should begin. Use a 24 hour clock time. Default is 20. Associated with CHECK_TIMER1_BEFORE_8PM. NOTE: Even if you change the default, the variable name will not change. It will still say CHECK_TIMER1_BEFORE_8PM. thresh_min_len: The minimum amount of time in minutes an interview should take. Use a positive integer. Default is 30. Associated with CHECK_TIMERX_ABOVE_MIN, where X is 1 through 4. thresh_max_len: The maximum amount of time in minutes an interview should take. Use a positive integer. Default is 75. Associated with CHECK_TIMERX_BELOW_MAX, where X is 1 through 4. The following is an example of changing the defaults in autovalid() for the timer checks. The object prepped_data is the output of the prep_data() function. See Chapter 2 for a refresher. autovalid(prepped_data, thresh_opening = 8, # Does the interview take place after 8am? thresh_closing = 16, # Does the interview take place before 4pm? thresh_min_len = 20, # Does the interview take longer than 20 minutes? thresh_max_len = 120 # Does the interview take less than 2 hours? ) 7.6 Result Columns There are an additional six column that are related to the timer checks that can be thought of as the “result columns”. They are TIMER1, TIMER2, TIMER3, TIMER4, COUNT_ABOVE_MIN and COUNT_BELOW_MAX. The first four simply record the time of the interview determined by each timer described in the sections above. The variables COUNT_ABOVE_MIN and COUNT_BELOW_MAX record the number of timers that pass the minimum and maximum length requirements, respectively. "],["varaince-checks.html", "Chapter 8 Variance Checks 8.1 SCORE_VARY 8.2 Result Columns", " Chapter 8 Variance Checks The tests are also known as “straightlining” checks. The autovalid() function checks whether the enumerator entered the same answer for all questions that appear on a page. This is particularly relevant to batteries, also known as grids. The resulting columns follow the naming pattern CHECK_QXX_VARIES where QXX is the root of the question battery/grid. For example, to see whether a interview contains the same answer for every question in the Q204 battery, look to the variable CHECK_Q204_VARIES. 8.1 SCORE_VARY The SCORE_VARY variable calculates the mean of all the CHECK_QXX_VARIES variables. The higher SCORE_VARY is, the fewer batteries are straightlined. The lower SOCRE_VARY, the more batteries contain all the same result (by individual battery). 8.2 Result Columns For each battery checked resulting in a CHECK_QXX_VARIES column, there is a QXX_RESPONSE column. If responses to the QXX battery vary, QXX_RESPONSE is NA. Otherwise, QXX_RESPONSE records the response used for every question in the battery. For example, if the same answer was recorded for every question in the Q204 battery, that answer would be recorded in Q204_RESPONSE. "],["missingness-checks.html", "Chapter 9 Missingness Checks 9.1 Changing Defualts 9.2 Result Columns", " Chapter 9 Missingness Checks The autovalid() function checks the level of missingness at both the interview- and enumerator-level. The result of the test is in: CHECK_MISS_IND A response is considered “missing” if it is coded as 98, 99, or 100. The missingness of an interview is calculated by the total number of missing responses divided by the total responses recorded. Only variables beginning with Q are counted. The variable CHECK_MIS_IND reports whether the percent of missing responses is below 15%. 9.1 Changing Defualts By default, autovalid() checks if the rate of missingness in an interview is below 15%. This can be changed with the argument thresh_mis_row using a numeric value between 0 and 1. The following is an example of changing the defaults in autovalid() for the missingness check. The object prepped_data is the output of the prep_data() function. See Chapter 2 for a refresher. autovalid(prepped_data, thresh_mis_row = .30 # Are more than 30% of answers 98/99/100? ) 9.2 Result Columns There is also a column that reports the percent missing for that interview. The column is called PCT_MISS. "],["percent-match.html", "Chapter 10 Percent Match Check 10.1 Changing Defaults 10.2 Result Columns", " Chapter 10 Percent Match Check The autovalid() function computes the percent match for each interview and checks whether it is below 85%. The result of the test is in: CHECK_PERCENT_MATCH. 10.1 Changing Defaults There are four arguments in autovalid() that can be used to change the default settings for the percent match check. thresh_max_pct : The highest percent one survey can match another. Use a number between 0 and 1. Defaults to 0.85. substantive_only : Whether to only include substantive questions. Must be TRUE or FALSE. Defaults to TRUE. first_sub_q : If only including substantive questions, where to start. Must be the name of a variable in the data. Defaults to \"Q2061A\". last_sub_q : If only including questions, where to end. Must be either the name of a variable in the data or \"auto\". Defaults to \"auto\". If argument is set to \"auto\", the autovalid() finds the last variable in the data beginning with \"Q\". The following is an example of changing the defaults in autovalid() for the percent match check. The object prepped_data is the output of the prep_data() function. See Chapter 2 for a refresher. autovalid(prepped_data, thresh_max_pct = 0.90, # Does the interview match below 90%? substantive_only = FALSE, # Include all questions in calculation first_sub_q = &quot;Q101&quot;, # Subset columns starting at Q101 (not relevant here) last_sub_q = &quot;Q700A_1&quot; # Subset columns ending at Q700A_1 (not relevant here) ) ## Note: The arguments `first_sub_q` and `last_sub_q` would be irrelevant in this case, ## since `substantive_only` is set to FALSE. 10.2 Result Columns The result of the percent match calculation can be found in PCT_MATCH. "],["location-checks.html", "Chapter 11 Location Checks 11.1 Always Included Checks 11.2 Potential Additional Checks 11.3 Changing Defaults 11.4 Result Columns", " Chapter 11 Location Checks The autovalid() function performs four location checks by default. Two more location checks can be preformed if additional data is provided. These checks are: CHECK_HAS_SURVEY_GPS (always included) CHECK_HAS_AUDIT_GPS (always included) CHECK_AUDIT2SURVEY (always included) CHECK_POSITION_CHANGE (always included) CHECK_CENTER2SURVEY (need additional data) CHECK_CENTER2AUDIT (need additional data) Anytime a distance calculation is preformed, the Haversine distance formula is used. 11.1 Always Included Checks Four checks are always run by autovalid(). They are CHECK_HAS_SURVEY_GPS, CHECK_HAS_AUDIT_GPS, CHECK_AUDIT2SURVEY, and CHECK_POSITION_CHANGE. The variables CHECK_HAS_*_GPS report whether GPS has been recorded by the survey and the audit file. If both the survey and the audit file have GPS records, the variable CHECK_AUDIT2SURVEY reports whether the two points are within 50 meters of each other using the Haversine formula. If the audit file has GPS records, CHECK_POSITION_CHANGE reports whether the enumerator moved more than 100 meters from when the interview began to when it finished. 11.2 Potential Additional Checks If location data is provided, two more location checks can be preformed. They are CHECK_CENTER2SURVEY and CHECK_CENTER2AUDIT. The location data provided must include the block ID and coordinates in longitude and latitude for the center of the block ID. If the additional location data is provided, CHECK_CENTER2SURVEY and CHECK_CENTER2AUDIT report whether the interview is less than 500 meters from an urban block center or less than 1000 meters from a rural block center. 11.3 Changing Defaults 11.3.1 Always There are two arguments in autovalid() for location checks that are always run. thresh_max_as : The maximum distance in meters the audit file GPS and survey GPS can be from each other. Use an integer. Defaults to 50. thresh_max_pos_change : The maximum distance in meters between the start and end of an interview as recorded by the audit file. Use an integer. Defaults to 100. The following is an example of changing the defaults in autovalid() for the location checks. The object prepped_data is the output of the prep_data() function. See Chapter 2 for a refresher. autovalid(prepped_data, thresh_max_as = 10, # Are the survey and audit recordings within 10 meters of each other? thresh_max_pos_change = 200, # Did the interview move less than 200 meters from start to finish? ) 11.3.2 Additional Parameters There are six arguments in autovalid() for location checks if additional data is provided. location_data : The name of the additional data file. Must be provided to see additional checks. MaryClare has included the reference coordinates sent by the partners on the Drive. You must load the data as a data frame into R, then supply that data to autovalid() through this argument. Defaults to FALSE. bid_col_name : The name of the column containing the Block ID in the supplied data file. Defaults to \"Block_ID\". If you use the data from the Drive provided by the partners and edited by MaryClare, this default is fine. If you use a different data source, you must provide the name of the column containing the Block ID. long_col_name : The name of the column containing the longitude in the supplied data file. Defaults to \"Longitude\". If you use the data from the Drive provided by the partners and edited by MaryClare, this default is fine. If you use a different data source, you must provide the name of the column containing the longitude. lat_col_name : The name of the column containing the latitude in the supplied data file. Defaults to \"Latitude\". If you use the data from the Drive provided by the partners and edited by MaryClare, this default is fine. If you use a different data source, you must provide the name of the column containing the latitude. thresh_max_urban : The furthest an interview can be from the supplied coordinates in an urban area. Use an integer. Partners may have suggestions for acceptable distances. Defaults to 500. thresh_max_rural : The furthest an interview can be from the supplied coordinates in an rural area. Use an integer. Partners may have suggestions for acceptable distances. Defaults to 1000. The following is an example of supplying additional location data without changing the defaults in autovalid() for the location checks. The package \"readxl\" is assumed to be loaded. The object prepped_data is the output of the prep_data() function. See Chapter 2 for a refresher. GPS_references &lt;- read_xlsx(&quot;path/to/Drive/location/data.xlsx&quot;) # Loading data MaryClare saved to the Drive. autovalid(prepped_data, location_data = GPS_references # Loaded location data MaryClare saved to the Drive. ) The following is an example of supplying additional location data and changing the defaults in autovalid() for the location checks. The package \"readxl\" is assumed to be loaded. The object prepped_data is the output of the prep_data() function. See Chapter 2 for a refresher. GPS_references_other &lt;- read_xlsx(&quot;path/to/Other/location/data.xlsx&quot;) # Loading data some location data. autovalid(prepped_data, location_data = GPS_references_other, # Loaded other location data bid_col_name = &quot;BID_Column_Name&quot;, # Block ID column name in location data long_col_name = &quot;Longitude_Column_Name&quot;, # Longitude column name in location data lat_col_name = &quot;Latitdue_Column_Name&quot;, # Latitude column name in location data thresh_max_urban = 15, # Is the interview within 15m of the central Block ID point for urban areas? thresh_max_rural = 3000 # Is the interview within 3km of the central Block ID point for rural areas? ) 11.4 Result Columns The actual distance between the audit GPS and the survey GPS, the audit GPS and the location data GPS, and the survey GPS and the location data GPS can be found in the columns AUDIT2SURVEY_DIST, CENTER2AUDIT_DIST, and CENTER2SURVEY_DIST, respectively. The distance is in meters and calculated according to the Haversine formula. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
